

[20150414]

page about using d3 to visualize

http://neo4j.com/developer/guide-data-visualization/

:POST /db/data/transaction/commit
  {"statements":[{"statement":"MATCH path = (n)-[r]->(m) RETURN path",
                  "resultDataContents":["graph"]}]}
		  


that's not exactly d3 format - 

Which can be converted to our visualization format by collecting the
nodes and relationships of the different rows into two lists. Just
make sure that each node is unique in the list and that the
relationships refer to the array-index (not the id) of the node.

function idIndex(a,id) {
  for (var i=0;i<a.length;i++) {
    if (a[i].id == id) return i;}
  return null;
}
var nodes=[], links=[];
res.results[0].data.forEach(function (row) {
   row.graph.nodes.forEach(function (n) {
     if (idIndex(nodes,n.id) == null)
       nodes.push({id:n.id,label:n.labels[0],title:n.properties.name});
   });
   links = links.concat( row.graph.relationships.map(function(r) {
     return {start:idIndex(nodes,r.startNode),end:idIndex(nodes,r.endNode),type:r.type};
   }));
});
viz = {nodes:nodes, links:links};



they recommend using alchemy instead of d3, for graphs


<script src="http://cdn.graphalchemist.com/alchemy.min.js"></script>
<script type="text/javascript">
  alchemy.begin({
        dataSource: "actors.json",
        nodeCaption: 'name',
        nodeMouseOver: 'name',
        cluster: true,
        clusterColours: ["#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02"]})
</script>




[20150412]

yesterday, ran out of points, had to pause feeding neo

github3-tests feed-neo netflix/vector

  finished.

  maybe should have picked a less-popular project as a first experiment - >2000 stargazers


in gui:

MATCH ()-[r:STARRED]->() RETURN r



[20150411]

made good progress with basic neo4j and py2neo yesterday


# try to find a fairly small project to start with.
(netflix/vector is big)

github3-tests info netflix/vector

github3-tests feed-neo netflix/vector

  - can be update or first-feed







[20150410]

i had been worrying about two-out experiments messing up caching, etags, etc.

just use a different root

----

(B)

tracker discover glueviz

  File "/Users/jeff/sandbox/oompa/tracking/github/FileMetadataStore.py", line 235, in getEntityMetadatas
    kind = github_obj.type.lower()
AttributeError: 'NoneType' object has no attribute 'type'


github3 does not return a user nor an organiation


github3-tests info netflix

github3-tests info glueviz

  nothing

duh.  helps if you spell it right



tracker discover glue-viz

----

experimenting with installing neo4j, and accessing from bulbs

download

unpack, in ~/packages/neo4j

cd packages/neo4j/neo4j-community-2.2.0

bin/neo4j start


visit: http://localhost:7474/

  default user - neo4j

    required password change - "neotest"



part of neo walkthrough


  CREATE (ee:Person { name: "Emil", from: "Sweden", klout: 99 })

    () means "node"
    {} surround attrs
    Person is the label
    

  MATCH (ee:Person) WHERE ee.name = "Emil" RETURN ee;

complex creation:

MATCH (ee:Person) WHERE ee.name = "Emil"
CREATE (js:Person { name: "Johan", from: "Sweden", learn: "surfing" }),
(ir:Person { name: "Ian", from: "England", title: "author" }),
(rvb:Person { name: "Rik", from: "Belgium", pet: "Orval" }),
(ally:Person { name: "Allison", from: "California", hobby: "surfing" }),
(ee)-[:KNOWS {since: 2001}]->(js),(ee)-[:KNOWS {rating: 5}]->(ir),
(js)-[:KNOWS]->(ir),(js)-[:KNOWS]->(rvb),
(ir)-[:KNOWS]->(js),(ir)-[:KNOWS]->(ally),
(rvb)-[:KNOWS]->(ally)

pattern matching:

MATCH (ee:Person)-[:KNOWS]-(friends)
WHERE ee.name = "Emil" RETURN ee, friends





Pattern matching can be used to make recommendations. Johan is
learning to surf, so he may want to find a new friend who already
does:

  MATCH (js:Person)-[:KNOWS]-()-[:KNOWS]-(surfer)
  WHERE js.name = "Johan" AND surfer.hobby = "surfing"
  RETURN DISTINCT surfer

    ()        empty parenthesis to ignore these nodes
    DISTINCT  because more than one path will match the pattern
    surfer    will contain Allison, a friend of a friend who surfs



the movie demo is great

http://neo4j.com/developer/cypher-query-language/


note: evaluating both bulbs and py2neo

  http://py2neo.org/2.0/


----

XXX trouble getting bulbs to work - authentication

    try py2neo
    

http://py2neo.org/2.0/intro.html#getting-connected

import py2neo

py2neo.authenticate("localhost:7474", "neo4j", "neotest")

graph = py2neo.Graph("http://localhost:7474/db/data/")

from py2neo import Node, Relationship


alice           = Node("Person", name="Alice")
bob             = Node("Person", name="Bob")
alice_knows_bob = Relationship(alice, "KNOWS", bob)

graph.create(alice_knows_bob)

  (<Relationship graph='http://localhost:7474/db/data/' ref='relationship/253' start='node/171' end='node/172' type='KNOWS' properties={}>,)


can immediately see it in the web ui


alice.properties["age"] = 33
bob.properties["age"]   = 44
alice.push()
bob.push()

graph.cypher.execute("CREATE (c:Person {name:{N}}) RETURN c", {"N": "Carol"})


for record in graph.cypher.execute("CREATE (d:Person {name:'Dave'}) RETURN d"):
    print(record)




A Record exposes its values through both named attributes and numeric
indexes. Therefore, if a Cypher query returns a column called name,
that column can be accessed through the record attribute called name:

for record in graph.cypher.execute("MATCH (p:Person) RETURN p.name AS name"):
    print(record.name)

  Alice
  Bob
  Carol
  Dave


Many applications require some form of uniqueness to be maintained for the data they manage. Neo4j’s optional schema feature allows such uniqueness constraints to be applied to a graph based on a combination of label and property and py2neo exposes this capability through the create_uniqueness_constraint method of the Graph.schema attribute:

>>> graph.schema.create_uniqueness_constraint("Person", "email")

If an attempt is made to create two nodes with similar unique property values, an exception will be raised and no new node will be created. To ‘get or create’ a node with a particular label and property, the merge_one method can be used instead:

>>> xavier = graph.merge_one("Person", "email", "charles@x.men")

This method is idempotent and uses a Cypher MERGE clause to only create a node if one does not already exist. If no uniqueness constraint has been created for a particular label and property combination however, it is possible for a MERGE to return multiple nodes. For this case, py2neo provides the related merge method.


#
# github3-tests info netflix/vector

  last_modified:   Sat, 11 Apr 2015 14:28:41 GMT

  contributors     spiermar
  contributors     meteorfox
  contributors     fche
  contributors     dylanjohnson


  forks            RoyZeng/vector
  ...
  
  stargazers       spiermar
  stargazers       nxbdi
  stargazers       danielrohers
  ...
  
  subscribers      cfieber
  subscribers      quidryan


repo1 = Node("Repository",   name = "netflix/vector")
org1  = Node("Organization", name = "netflix")
user1 = Node("User",         name = "spiermar")

graph.create(repo1)
graph.create(org1)
graph.create(user1)

graph.create(Relationship(user1, "CONTRIBUTES", repo1))
graph.create(Relationship(user1, "STARRED",     repo1))



[20150403]

github3-tests two-out dotcloud/zerorpc-python




github3-tests two-out burnash


github3-tests two-out netflix

  a user.  maybe have to specify --org, if there are both user and org

  this could get huge anyway
  
  

[20150331]

i figured out part of the "not on list any more: followers: ''" issue:

GitHubTracker.discover(): voldemort                 /Users/jeff/src/github/user/voldemort
  diffList - empty in prevValue: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'brett', 'jney', 'nikolay', 'tiendung', 'brimbrom', 'mmakunas', 'geir', 'tfredrich', 'temojin', 'eliast', 'stonegao', 'elijah', 'sbendiola', 'kbsali', 'intltechventures', 'matagus', 'rnella01', 'omnisis', 'takuya-itoh', 'fern', 'mcaserta', 'kirktrue', 'afeinberg', 'codmajik', 'janwen', 'kumagi', 'aalmenar', 'jingle', 'nabeelmukhtar', 'bquilitz', 'leonhong', 'niteshsinha', 'pcora', 'githubapitest', 'maruks', 'skylerjohnson80', 'stanchan', 'carterpage', 'cmartins', 'bwaite-bfly', 'elizabethcnfortunato', 'awright18', 'dgj2ba', 'erdel', 'NeoCN', 'wufawei', 'shingon', 'ctasada', 'vicky12', 'rtymchik', 'hanw', 'HsiaoFin', 'shauryashaurya', 'vish-dawange', 'rubanm', 'strategist922', 'jeffpeiyt', 'yuj', 'Syhlver', 'lgsonic', 'fnu', 'DaoShen', 'Konig', 'alexsandovalv', 'maricn', 'bunnyblanco', 'dapurv5', 'qianyilei', 'eddyxu', 'jonathang', 'fordream', 'glix', 'prasadmuley', 'trusbe', 'chinnurtb', 'nxbdi', '0xae', 'hufeng825', 'hwangsyin', 'hanziwang', 'lauracarvajal', 'justinshea', 'cshaxu', 'hellfish2', 'naveen-raju', 'adolfosousa', 'icejoywoo', 'jero-rodriguez', 'abhi1one', 'wildinto', 'comeonbabye', 'JimChen']




[20150321]

- discover - simple experiment to diff the public members from last time, when there is a new batch
  - i think that any update implies that all of them are new


googe is one that frequently has an enormous "new" public member result

  src/github/organization/google/tracker.meta.json

    has an empty public_members list

  ah.  so the trick is that i'm not updating/saving meta?


refactored a lot, and added tracing.

where are the etags stashed?

  XXX currently ~/etags.json

----

handling the "binary" strings is apparently fairly simple: s = s.decode("ascii")







[20150319]

working on being able to dump the readme of  new project

just pick one

http://github.com/curran/cdn

github3-tests info curran/cdn

# this works, too, now:

github3-tests info http://github.com/curran/cdn


warning: a single info is costly - dozens or more points per check.
can easily blow through an hour of points

  






----

continuting to regularly get giant bursts of public_members, which seems wrong

  maybe the members are all stored as one entity, with one etag, so whenever
  one person is added, the whole thing is considered updated?

    in which case, *we* need to track/diff


----



[20150310]

i think etag may not work perfectly?

"tracker discover" reported all projects for someone that i've been
tracking for a couple of days, and about 100 public members.  unlikely
that they are new.

could be me not storing previous meta correctly, but i don't think that's it

maybe it's me failing to handle an error, and storing a bad etag?

----

spark moved, from "bdas/spark" to "apache/spark" (and repo was replaced)

would be great to have a couple of things:

  - symlinks
  - the org-using-github-hierarchy working
    - 
  - remove


experiment:

(re-)check out spark in to src/github/organization/apache

cd src/cloud/spark

# we don't have a full "rm" yet
tracker rm bdas

rm -rf bdas

cd src/cloud

ln -s ../github/organization/apache/spark






[20150309]

tracker discover worked today for the first time (had to wait for new projects ...)


tracker discover

GitHubTracker.discover(): mapbox                    /Users/jeff/src/github/organization/mapbox
  2 new repos
    repo:     2015-03-07 00:13:40+00:00  2015-03-09 09:22:41+00:00  'mapbox/mapbox-studio-mars-terrain.tm2'
    repo:     2015-03-06 01:31:54+00:00  2015-03-09 09:22:09+00:00  'mapbox/mapbox-studio-mars-satellite.tm2'

----




[20150308]

started looking in to oauth, but i don't think i have everything i need:

  - homepage url
  - authorization callback url
  - 

maybe it's ok - this page says to register a new application and set both urls to http://localhost:4567/


  https://developer.github.com/guides/rendering-data-as-graphs/

----

support no-args discover - this is really tracking ...


tracker discover

  scan took about 90 points from hourly budget

  several projects listed all of their repos?

  should probably look in to pagination, too

----

tried getting etags to work again

   found a stackoverflow indicating that etag needs to have double quotes

   min start with 'W/"13e25..."'

maybe it's just the iter versions?


tried logging.  didn't do anything.  both github3 and urllib3


PYTHONPATH=/Users/jeff/src/tracking/dev/github3.py/git/github3.py:$PYTHONPATH


  XXX had to hack sys.path ???


 with {'params': {'per_page': 100}, 'headers': {'If-None-Match': 'W/"3544dc247aaed937b3b37706fb344781"'}}

curl -i https://api.github.com/orgs/locationtech/repos

  ETag: "dbfde998f6167a5c3224bc6b80f28c09"

    so maybe i'm not using the right etag?


curl -i https://api.github.com/orgs/locationtech/repos -H 'If-None-Match: "dbfde998f6167a5c3224bc6b80f28c09"'

  Status: 304 Not Modified
  ETag: "dbfde998f6167a5c3224bc6b80f28c09"


curl -i https://api.github.com/orgs/locationtech/repos -H "If-Modified-Since: Thu, 28 Feb 2015 15:31:30 GMT"

  XXX doesn't work any more



github3-tests values org:locationtech


----

still have some projects to manualy check out


cd ~

tracker import tracker-urls.laptop.txt

  XXX crashes

maybe simpler to filter down the file


cat tracker-urls.laptop.txt | grep -v github.com

cat tracker-urls.laptop.txt | grep -v github.com > need-to-retrack.txt

??? pypy should be already checked out

cd ~/src/python/pypy

tracker update $(pwd)


i think the symlink is wrong:


  tracker update $(pwd)
  logging to: /Users/jeff/tracker-logs/20150308.tracker.log
    ExecVCSBackend._run(): 'hg incoming'
      cwd: /Users/jeff/src/python/pypy/hg

cd /Users/jeff/src/python/pypy/hg/pypy

hg incoming

  a good update

XXX and then it did not seem broken ...

----

XXX every once in a while, git gets completely confused, says that my
    local changes are conflicting

    it's too hard to untangle.  easier just to start over

/Users/jeff/src/tracking/mining/pymc/pymc


----

still a pain to check out non-uniform projects

e.g., weka

have to look on web page, find instructions

  svn co https://svn.cms.waikato.ac.nz/svn/weka/trunk/weka

cd src/mining
mkdir weka
mkdri weka/svn
cd weka/svn
svn co https://svn.cms.waikato.ac.nz/svn/weka/trunk/weka
cd ../..
tracker track weka


----

testing followers (and generic listing mechanism)


github3-tests list followers keith-turner




[20150307]

filesystem organization for tracking github entities:

src/github/{user,org}

  not distinguishing users and orgs here, since github urls don't

  (10 minutes later, i already changed my mind - easier for me if i know
   it's a user or org)

  src/github/user/...
  src/github/organization/...


note: doing things this way is going to put pressure on symlinks for
the "folksonomy" organization


baby step: "tracker discover"
  - list projects 
    - stash what i saw
  - list new projects
    - describe them
    

# github is implied, for now

tracker discover chriswhong




tracker discover amplab




TODO: generate simple bayes classifier, with project name/description, and maybe readme, as features

  - train with the projects that i have checked out
  
  - eventually: not just yes/no, but what tags would i apply?



[20150306]

progress toward tracking and discovery

github3-tests info org:locationtech
ORG: <Organization [locationtech:LocationTech]>
org: locationtech - LocationTech
  bio:      None
  blog:     http://locationtech.org
  company:  None
  location: Global
    member: fosslc
    repo:         locationtech/udig-platform
    repo:         locationtech/geomesa
    repo:         locationtech/geogig
    repo:         locationtech/geoff


github3-tests info fosslc


----

github3-tests who-starred keith-turner/fluo


  Repository.source is another Repository - where it was forked from


----

chain out from densitydesign/raw

github3-tests info densitydesign/raw

github3-tests info org:densitydesign







----

cleaned up/refactored

github3-tests slots org:locationtech

github3-tests slots user:keith-turner



----





[20150305]

working on tracker move

# scenario - found another docker-related project (helios), and i want
# to move src/cloud/docker/* in to src/cloud/infrastructure

# requirements:
#   - dest folder must exist
#     - otherwise, we assume typo and don't want to make mistakes

cd src/cloud

mkdir infrastructure

tracker mv docker/* infrastructure

  note that that is different than "tracker mv docker infrastructure"


----

playing with github3.py



github3-tests --orgs twitter,locationtech

github3-tests --users joshelser



TODO: followers/following

TODO: dynamic graphs
  - maybe ping yee's radial stuff?

TODO: storylines


XXX version installed under anaconda is very old, rel to the

installed latest from git

  python setup.py install


now the code matches readthedocs





[20150217]

XXX not checking out from sourceforge git properly

tracker co git://git.code.sf.net/p/guitarix/git


GITVCSBackend.checkout(): git://git.code.sf.net/p/guitarix/git, ()
  vcs_path: /Users/jeff/src/audio/git/git
  cmd: git clone git://git.code.sf.net/p/guitarix/git 
Cloning into 'git'...
remote: Counting objects: 33884, done.        
remote: Compressing objects: 100% (11612/11612), done.        
remote: Total 33884 (delta 27075), reused 28123 (delta 21990)        
Receiving objects: 100% (33884/33884), 47.80 MiB | 1.24 MiB/s, done.
Resolving deltas: 100% (27075/27075), done.
Checking connectivity... done.
   TRACKING: '/Users/jeff/src/audio/git'
   tracker link path: None


figure out the problem - sf has you check out to a specified name:

  git clone git://git.code.sf.net/p/crosti/git crosti-git

  but, the export couldn't (or didn't) capture that
    (maybe could have detected that folder name is different than piece of
     git url)


updated VCSBackend._determine_project_name to gracefully handle just
the git: pieces of a sorceforge checkout


have to fix (re-check-out) a number of projects

  - crosti
  - 



[20150216]

my changes to use logging have made it harder to see the changes
  - which projects
  - what were the interesting changes
  - ...

need to write the simplifier/prettifier

----

XXX checking this one out (from sourceforge git), created a mis-named project:

tracker co git://git.code.sf.net/u/ssj71/rakarrack u-ssj71-rakarrack

GITVCSBackend.checkout(): git://git.code.sf.net/u/ssj71/rakarrack, ('u-ssj71-rakarrack',)
  vcs_path: /Users/jeff/src/audio/rakarrack/git
  cmd: git clone git://git.code.sf.net/u/ssj71/rakarrack u-ssj71-rakarrack
Cloning into 'u-ssj71-rakarrack'...
remote: Counting objects: 10796, done.        
remote: Compressing objects: 100% (2980/2980), done.        
remote: Total 10796 (delta 8604), reused 9792 (delta 7811)        
Receiving objects: 100% (10796/10796), 7.64 MiB | 2.10 MiB/s, done.
Resolving deltas: 100% (8604/8604), done.
Checking connectivity... done.
   TRACKING: '/Users/jeff/src/audio/rakarrack'
   tracker link path: /Users/jeff/src/tracking/audio/rakarrack

this is *not* the official rakarrack project

  it's a fork


[20150208]

finish full import of projects on laptop

  fix goof with deeper and deeper relative paths


----

check out the next project that "tracker import" cannot handle

cd ~

tracker import tracker-urls.laptop.txt

    note: fixing the sourceforge git issue took care of several of them
    

  we don't check out hg projects yet - /home/jeff/src/tracking/mining/mallet/mallet http://hg-iesl.cs.umass.edu/hg/mallet

    have to update patterns in vcs_utils.py
    



----

moving to git

# remove .hg and .hgignore

git init

# add everything
#
# ??? had to add *~ to local .gitignore
# ??? could not find git config folder in $HOME

commit

create the develop branch

git checkout -b develop master

#
# my email and name were not set up
#

git config --global user.name "Jeff Turner"
git config --global user.email sjtsp2008@gmail.com

git commit --amend --reset-author -m "fix author after fixing git config"


----

install github3.py, with goal of tracking companies/developers (i
frequently want to see what else someone is working on, once i like
one of their projects)


sudo pip install github3.py

note: pulls in a nice-looking library called "requests":

Requests: HTTP for Humans

Most existing Python modules for sending HTTP requests are extremely
verbose and cumbersome. Python's builtin urllib2 module provides most
of the HTTP capabilities you should need, but the api is thoroughly
broken. It requires an enormous amount of work (even method overrides)
to perform the simplest of tasks.

Things shouldn't be this way. Not in Python.

>>> r = requests.get('https://api.github.com', auth=('user', 'pass'))
>>> r.status_code
204
>>> r.headers['content-type']
'application/json'
>>> r.text
...


Requests allow you to send HTTP/1.1 requests. You can add headers,
form data, multipart files, and parameters with simple Python
dictionaries, and access the response data in the same way. It's
powered by httplib and urllib3, but it does all the hard work and
crazy hacks for you.

Features

    International Domains and URLs
    Keep-Alive & Connection Pooling
    Sessions with Cookie Persistence
    Browser-style SSL Verification
    Basic/Digest Authentication
    Elegant Key/Value Cookies
    Automatic Decompression
    Unicode Response Bodies
    Multipart File Uploads
    Connection Timeouts
    Thread-safety
    HTTP(S) proxy support


and anothe package:

uritemplate

Simple python library to deal with URI Templates. The API looks like

from uritemplate import URITemplate, expand

# NOTE: URI params must be strings not integers

gist_uri = 'https://api.github.com/users/sigmavirus24/gists{/gist_id}'
t        = URITemplate(gist_uri)

print(t.expand(gist_id='123456'))

# => https://api.github.com/users/sigmavirus24/gists/123456

# or
print(expand(gist_uri, gist_id='123456'))

# also
t.expand({'gist_id': '123456'})
print(expand(gist_uri, {'gist_id': '123456'}))


Where it might be useful to have a class

import requests

class GitHubUser(object):
    url = URITemplate('https://api.github.com/user{/login}')
    def __init__(self, name):
        self.api_url = url.expand(login=name)
        response = requests.get(self.api_url)
        if response.status_code == 200:
            self.__dict__.update(response.json())

When the module containing this class is loaded, GitHubUser.url is
evaluated and so the template is created once. It's often hard to
notice in Python, but object creation can consume a great deal of time
and so can the re module which uritemplate relies on. Constructing the
object once should reduce the amount of time your code takes to run.


[20150207]

added "urls" command, to export tracked projects from laptop,
and "import" command, to check them out on new-mac

only mildly tested import - just a few projects


[20150201]

tracker update >> ~/tracker-logs/$(date +%Y%m%d).tracker.log &

  fixing some issues with fasle git conflicts ...



updating /home/jeff/src/tracking/games/rpg/stendhal/maurauroa/marauroa
  pull result: 1

error: Your local changes to the following files would be overwritten by merge:
	functional_tests/marauroa/clientconnect/ClientConnectTest.java
	functional_tests/marauroa/helper/ResetMarauroaSingleton.java
Please, commit your changes or stash them before you can merge.
Aborting
Updating 1459aa9..203f994

  result: /home/jeff/src/tracking/games/rpg/stendhal/maurauroa/marauroa - 1


cd /home/jeff/src/games/rpg/stendhal/maurauroa/git/marauroa

# try it (what tracker does)

git pull

  <same problem>

git branch

  * master

git reset --hard

  HEAD is now at 1459aa9 deleted pom.xml because it does not work, yet.

git pull

  still no

git reset --hard origin/master

  HEAD is now at 203f994 Normalized line endings

git pull

  Already up-to-date.


updating /home/jeff/src/tracking/games/ccg/mtg/jportal/jportaltgc-code

svn: Network connection closed unexpectedly

  XXX something wrong?  result: 1
      cd /home/jeff/src/tracking/games/ccg/mtg/jportal/jportaltgc-code; svn update
  result: /home/jeff/src/tracking/games/ccg/mtg/jportal/jportaltgc-code - 1


updating /home/jeff/src/tracking/games/ccg/mtg/jportal/jportaltgc-code

svn: Network connection closed unexpectedly

  XXX something wrong?  result: 1
      cd /home/jeff/src/tracking/games/ccg/mtg/jportal/jportaltgc-code; svn update
  result: /home/jeff/src/tracking/games/ccg/mtg/jportal/jportaltgc-code - 1


check .svn/entries

  svn://svn.code.sf.net/p/jportaltgc/code

  here is what sf says to check out:

    # svn checkout svn://svn.code.sf.net/p/jportaltgc/code/ jportaltgc-code

svn up

  svn: Network connection closed unexpectedly

# try another checkout.  hail mary

mv jportaltgc-code jportaltgc-code-

svn checkout svn://svn.code.sf.net/p/jportaltgc/code/ jportaltgc-code

  worked!

rm -rf jportaltgc-code-

----

updating /home/jeff/src/tracking/games/puzzles/nonogram/freenono/feenono-svn

svn: Network connection closed unexpectedly

  XXX something wrong?  result: 1
      cd /home/jeff/src/tracking/games/puzzles/nonogram/freenono/feenono-svn; svn update
  result: /home/jeff/src/tracking/games/puzzles/nonogram/freenono/feenono-svn - 1


probably same issue as jportalgc, above

cd /home/jeff/src/games/puzzles/nonogram/freenono/svn/feenono-svn

  # ?  feenono-svn ?

svn up

  svn: Network connection closed unexpectedly

mv feenono-svn feenono-svn-

head feenono-svn-/.svn/entries 

svn co svn://svn.code.sf.net/p/freenono/svn

  svn: Network connection closed unexpectedly


svn checkout svn://svn.code.sf.net/p/freenono/svn/trunk freenono-svn

  worked.  so what is the difference?

----

updating /home/jeff/src/tracking/mining/gensim/gensim
  pull result: 1

You asked me to pull without telling me which branch you
want to merge with, and 'branch.deep-tracing.merge' in
your configuration file does not tell me, either. Please
specify which branch you want to use on the command line and
try again (e.g. 'git pull <repository> <refspec>').
See git-pull(1) for details.

If you often merge with the same branch, you may want to
use something like the following in your configuration file:
    [branch "deep-tracing"]
    remote = <nickname>
    merge = <remote-ref>

    [remote "<nickname>"]
    url = <url>
    fetch = <refspec>

See git-config(1) for details.

  result: /home/jeff/src/tracking/mining/gensim/gensim - 1


this one is probably trickier.  i *have* done a ton of work in a gensim 
checkout, but i thought it was separate


ah, right.  this was an experiment in trying to work on a branch
in the same repo that i'm updating.  i don't think it worked

just start over.  moved git to git-failed-attempted-deep-tracing-branch

----

updating /home/jeff/src/tracking/cloud/impala/impala

  Username for 'https://github.com': 

mv impala impala-

git clone https://github.com/cloudera/Impala.git

# XXX have to fix the tracker link




[20131210]

added another git pattern: http://git.code.sf.net/p/guitarix/git

updated tests

cd sandbox/oompa

nosetests

  failed.  not sure why, but not about this change

cd tracking/tests

nosetests

  yep, works

----

this checkout (with an alternate name) is throwing the checkout off:

instructions say "git clone http://git.code.sf.net/p/guitarix/git guitarix"

tracker co http://git.code.sf.net/p/guitarix/git guitarix

  the project is checked out as "git", not "guitarix"

  write some tests in test_VCSBackend, and fix VCSBackend._determine_project_name

tracker co http://git.code.sf.net/p/guitarix/git guitarix

  figured out guitarix, but checked out in to git/git/guitarix

enough for today.  just check out and track the hard way this time




[20120219]

added another git pattern - git://

trying to find the problem with checkout - always crashes during the
track part, at least with git - a folder exists where we are trying to
make a symlink

----

trying to check out roundup, and i think sourceforge shut me down,
though something was wrong, because i'm trying a checkout multiple
times


cd src/dev/issue-trackers

tracker co git://roundup.git.sourceforge.net/gitroot/roundup

fatal: The remote end hung up unexpectedly

  XXX something wrong?  result: 128
      cd /home/jeff/src/dev/issue-trackers/roundup/git; git clone git://roundup.git.sourceforge.net/gitroot/roundup 

tried by hand, same thing.

try again in a little while ...




[20120218]

hg output much better



[20120213]

cleaned up hg output a little bit

  - don't care about these:
    comparing with https://bitbucket.org/pypy/pypy
    searching for changes
    changeset:   52394:286b7a2ad62f
    parent:      52392:f312b056bb07


TODO: make this *optional* - maybe some people do care

-----

tabling this one.  it's nice to remember everything i want to track,
and it's not that much noise (yet)

- option to only report projects that have updates,
  vs reporting all that we are about to try ...
  - just wait to report "updating"
    - might be tricky, i think those messages are separate



[20120212]

stopped reporting the second half of the mercurial output - the part
that talks about "adding changeset", ...  the number of files changed
does not matter in this context.  just more noise


[20120204]

starting over with source.  too much cruft, some of it 10 years old
and no longer really useful

moved sandbox/oompa to sandbox/oompa-old, and only copied 
over enough to get tracker to run.

hg init

# add everything that's in there now
#   XXX how to automatically ignore __pycache__ and .pyc?

# create a .hgignore file

  __pycache__
  .*\.pyc$


hg add

hg commit -m "initial checkin"

----

switching over to list-based pattern detection, using tests

based on a python testing taxonomy page, it seems like nose might be
the best path

  - test discovery
  - extra support

easy_install nose


cd oompa

nosetests

cd oompa/tracking/tests

nosetests

  appears to gobble stdout?




[20120203]

tracker co https://bitbucket.org/genericcontainer/goblin-camp

  XXX vcs_utils could not detect 

added hack to dictate that bitbucket is hg.  XXX which is not always
correct - bitbucket supports both

  - may need to provide a clue, or try twice


TODO: ask for a clue, and add to database
  - answer, and why


[20120127]

hg checkout works:

cd src/games

tracker checkout http://openblox.hg.sourceforge.net:8000/hgroot/openblox/openblox 





[20120118]

fixed backend.push_folder, backend.pop_folder

implemented git update (git pull)



[20120116]

pgu changed, so we have first svn changes
  - actually caused a conflict in gui5.py
    - had to interact by hand
      - need a default mode
  - svn still returns 0, even with the conflict
    - i think we will have to examine the entire output



[20120114]

got tracker working under python3

----

updated to support capturing stdout/stderr, and caller
has option to report or not.

main point is to suppress "no updates" noise.

applied to mercurial first

----

started hg management of project - based on hginit.com

hg init

----

baby steps toward:

- use tracker to check out from 
    tracker co https://github.com/drewbuschhorn/gmail_imap.git
  - must already be in the correct parent folder

tracker co https://github.com/drewbuschhorn/gmail_imap.git


[20120108]

tracker checkout http://lwpgt.googlecode.com/svn/trunk/ lwpgt-read-only




[20091017]

a non-bug

(B) i did something wrong with src/games/mud/evennia, trying to track it
    - svn project
    - 
    - linked to tracking/games/mud/evennia -> evennia/svn
    - but that only has an evennia folder, which is *not* svn ???
      - by hand, have to "cd evennia; svn update"
      - i think it's an issue with not really finding the root vsc_folder correctly
    - still, shouldn't it dive in?

it actually works - dives as deep as it needs to

cd src/tracking/games/mud

tracker update evennia

updating /Users/jeff/src/tracking/games/mud/evennia/evennia

At revision 786.
----

baby steps toward checkout

cd src/games/pygame/libs

tracker checkout http://lwpgt.googlecode.com/svn/trunk/ lwpgt-read-only


  works

    actually, not quite - 

----

cd src/cloud

mkdir -p bixo
cd bixo

tracker checkout git://github.com/emi/bixo.git

  that didn't work quite right - checked out bixo

move that into git folder


TODO:
   - automatically track it

TODO:
    - specify dest/category - don't have to cd









[20091010]

modified tracker
   (and refactored to have Project, VCSBackend, ...)

tracker update

----

working out how we will check out code

case study:

  http://livelykernel.sunlabs.com/repository/lively-kernel/trunk/

  note: no clues about type of repo
    choices: 
        - try flavors in order

by hand:

cd src 

mkdir -p ui/lively-kernel/svn
cd ui/lively-kernel/svn

svn co http://livelykernel.sunlabs.com/repository/lively-kernel

cd ../..

tracker track lively-kernel



tracker checkout http://livelykernel.sunlabs.com/repository/lively-kernel/trunk/

#
# will go in src/ui/lively-kernel/svn
#
tracker checkout http://livelykernel.sunlabs.com/repository/lively-kernel/trunk ui



[20091007]

dusting off tracker system (again)

new challenge is the large number of new systems: svn, hg, bzr, git

trying to use pyvcs  http://github.com/alex/pyvcs/

cd packages/dev/vcs/pyvcs/git/pyvcs

  git clone git://github.com/alex/pyvcs.git

also says it needs pysvn

python setup.py install

  XXX no setuptools

just try using from where it is

PYTHONPATH=$PYTHONPATH:/Users/jeff/packages/dev/vcs/pyvcs/git

  pretty crappy doc, no 

add a script pyvcs-co 

  actually, no: use oompa/scripts/checkout
     (moved from oompa/cvsu/scripts)

#
# in track-utils.sh
#
PATH=$PATH:/Users/jeff/sandbox/oompa/scripts

XXX there is nothing about checking out


which track

track 


cd ~/src/python/pypy

track pypy

  now there is a link from /users/jeff/src/tracking/python/pypy


TODO: change "track" to "tracker track",
so that we can use "tracker update" as cvsu-py

tracker track pypy



----

next challenge - 

cd src/web/google-wave/wave-protocol

did not check out into 

  just moving it, for now.  clever discovery later.

  it's really better to have explicit folder for hg, svn, ...
    - lets you also have versioned tarballs, ...


cd src/web/gogle-wave

tracker track wave-protocol
tracker track wave-robot-python-client-read-only

tracker update

XXX problem: in tracker tree, there is not an explicit "hg" folder

[20030214]

dusting off cvsu.py
