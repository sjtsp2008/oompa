#! /usr/bin/env python
#
# github3-tests
#
# TODO:
#  - switch to click for arg parsing and command handling
#

import argparse
import logging
import os
import sys
import time

import click
import github3
import yaml

# XXX wrong home for these
from oompa.tracking.github               import github_utils
from oompa.tracking.github.GitHub3Helper import GitHub3Helper


dumpList = github_utils.dumpList




#
# main
#

parser = argparse.ArgumentParser()

parser.add_argument("command", help = "command")
parser.add_argument("extraArgs", nargs = "*")

args          = parser.parse_args()

# XXX use yaml
config = {}

# TODO: able to turn on with option (e.g., --log)
logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)


# note that these are not necessary, if you just do the basicConfig above
#
# urllib3_logger = logging.getLogger('requests.packages.urllib3')
# github3_logger = logging.getLogger('github3')
# 
# github3_logger.setLevel(logging.DEBUG)
# urllib3_logger.setLevel(logging.DEBUG)

# XXX still working this out - alternate root when doing aggressive caching for large two-out experiments

if args.command == "two-out":
    config["github.meta.store"]   = "neo4j"
    # config["github.meta.neo4j.fs.root"] = 
    pass

helper    = GitHub3Helper(config)

# github_utils.dumpSlots(github3, "github3 module")

print("rate points before: %s" % helper.checkRatePointsLeft())

if args.command == "repos":

    for kind, name, obj in helper.getKindNameAndObject(args.extraArgs):
        print("%s: %s - %s" % ( kind, name, obj.name ))
        gitHelper.printRepos(user)
        pass
    pass

elif args.command == "info":
    #
    # get info about a user, organization, or repo, or special keys
    # "me", "github3" (module), "github" (the github object)
    #

    # TODO: can probably just integrate this in to generator
    # XXX refactor
    firstArg = args.extraArgs[0]

    if firstArg == "me":
        #
        # report information about your account
        #
        me  = helper.github.me()

        github_utils.dumpSlotValues(me)

        # default rate is 5000/hr
        print("  remaining rate limit: %s" % me.ratelimit_remaining)

        sys.exit()
        
    elif firstArg == "github3":

        # the github3 module itself (show all slots available)
        github_utils.dumpSlots(github3, "github3 module")
        sys.exit()

    elif firstArg == "github":

        github_utils.dumpSlots(gitHelper.github, "github obj")
        sys.exit()
        pass

    for kind, name, obj in helper.getKindNameAndObject(args.extraArgs):

        print("%s: %s - %s" % ( kind, name, obj.name ))

        # common across User and Organization
        print("  url:          %s" % obj.html_url)

        # XXX diagnosing why starred_repositories don't report full_name properly
        if 0:
            for item in obj.starred_repositories():
                print("   ITEM: %r" % item)
                print("     dir: %s" % dir(item))
                print("     homepage: %s" % item.homepage)
                xxx
                pass
            xxx
            
        if kind == "User":

            user = obj

            print("  bio:      %s" % obj.bio)
            print("  company:  %s" % obj.company)
            print("  location: %s" % obj.location)
            print("  blog:     %s" % user.blog)
            print("  plan:     %r" % user.plan)

            # XXX 20160325 - trying to isolate a false rate-limit problem
            
            dumpList(obj, "followers")
            dumpList(obj, "following")
            dumpList(obj, "organizations")
            dumpList(obj, "starred_repositories")
            dumpList(obj, "subscriptions")

            # XXX why is this access different?
            for repository in github3.repositories_by(user.login):
                print("  repo:           %s" % repository)

        elif kind == "Organization":

            print("  bio:      %s" % obj.bio)
            print("  company:  %s" % obj.company)
            print("  location: %s" % obj.location)

            dumpList(obj, "public_members")
            dumpList(obj, "repositories")
            
        elif kind == "Repository":

            # was it forked from something?
            print("  full_name:       %s" % obj.full_name)
            print("  parent:          %s" % obj.parent)
            print("  source:          %s" % obj.source)
            print("  description:     %s" % obj.description.encode("utf8"))
            print("  homepage:        %s" % obj.homepage)
            print("  language:        %s" % obj.language)
            print("  last_modified:   %s" % obj.last_modified)
            print("  updated_at:      %s" % obj.updated_at)

            # branches()

            # code_frequency()

            # XXX blocked - requires authentication
            # dumpList(obj, "collaborators")

            # comments()

            # commit_activity()
            # commits()

            # contributor_statistics()

            github_utils.dumpList(obj, "contributors")

            # default_branch

            # deployments() ???

            # events()

            github_utils.dumpList(obj, "forks")
            
            # hooks() ???

            # issues()

            # keys() ???

            # labels() ???   i think these are tags used in issues/planning

            github_utils.dumpList(obj, "languages")

            # milestones()

            # notifications()

            # open_issues_count ???

            # owner  (a User object)

            # pull_requests

            # refs() ???

            # releases() ???

            # size (what are units?)

            # statuses() ?
            
            github_utils.dumpList(obj, "stargazers")
            github_utils.dumpList(obj, "subscribers")

            # tags()

            # i think that tree is some sort of file tree.  (i was hoping it was fork ancestry)
            # tree = obj.tree()
            # print("TREE: %s" % tree)
            
            # teams()

            # { "Last-Modified": "", "all": [0, 0, 1, 1, ..., (52 weeks?) ], "owner": [ 0, 0, 0, 0, ... ] }
            print("  weekly_commit_count:   %s" % obj.weekly_commit_count())

            # a Content
            readme = obj.readme()

            print("readme:")

            print("%s" % readme)

            # readme.content appears to be base64 encoded
            # print("content: %s" % readme.content)
            print("content: %s" % readme.decoded)
            
        else:
            xxx
            pass

        print("")
        pass
    pass


elif args.command == "list":

    methodName = args.extraArgs[0]

    for entityName in args.extraArgs[1:]:

        print("%s" % entityName)
        obj      = helper.getGithubObject(entityName)

        values   = helper.list(methodName, obj)

        for value in values:
            print("    %s" % value)
            pass
        pass

    pass
    
elif args.command == "who-starred":

    # interesting - need to supply an owner and a repo

    for ownerReponame in args.extraArgs:

        repository = getGithubObject("repo", ownerReponame, github)

        print("  repo: %r" % repository)

        # github_utils.dumpSlotValues(repository)

        for stargazer in repository.stargazers:
            print("    stargazer: %r" % stargazer)
            pass
        
        pass
    pass
        
elif args.command == "slots":

    for kind, name, obj in helper.getKindNameAndObject(args.extraArgs):
        github_utils.dumpSlots(obj, kind)
        pass
    pass

elif args.command == "values":

    for kind, name, obj in helper.getKindNameAndObject(args.extraArgs):
        github_utils.dumpSlotValues(obj, kind)
        pass
    pass

else:
    print("XXX we don't do command: %s" % args.command)
    pass

print("rate points after:  %s" % helper.checkRatePointsLeft())
