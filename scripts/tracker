#! /usr/bin/env python3
#
# tracker
#
#   utility for linking a version-controlled tree (svn, cvs, hg, git, ...)
#   into a tree of projects to be tracked
# 
# TODO:
#    - use real config, for declaring where tracking folder is, ...
#    - need CommandHandler support
#    - full triggered support
#      - when something updated, update some other project and run tests, ...
#

_usage_str = """usage: tracker <command> <folder> [...]

  track

    --replace

  checkout (aka co)

  update [project] [...]
  up

  untrack <src-folder> [...]     (*not* the src/tracking/... folder)

"""

import argparse
import datetime
import logging
import os
import sys

# XXX wtf? PYTHONPATH is not being respected?  the github3 egg is earlier ???
# sys.path.insert(0, '/Users/jeff/src/tracking/dev/github3.py/git/github3.py')

from pylib.util     import opt_utils
from pylib.util     import usage

from oompa.tracking.SourceTracker import SourceTracker

from oompa.tracking.github.GitHubTracker import GitHubTracker
from oompa.tracking.github               import github_stats
from oompa.tracking.github               import github_utils
    


#
# 
#

_options = [

    "replace",

    'check',       # just check what would be done

    "help",

    ]

# XXX still in transition
parser = argparse.ArgumentParser()

options, args   = opt_utils.parse_options(_options)



# XXX load a config, from yaml
config = {}

if not args:
    usage.usage()
    pass


tracker = SourceTracker(config)

command = args[0]
args    = args[1:]

# XXX switch to command handler


# TODO: only certain commands what a log

dont_need_log = [
    "find",
    "discover",

    "nash-stats",
    "graph-viz",
    ]

if command not in dont_need_log:
    log_base = os.path.join(os.environ.get("HOME"), "tracker-logs")
    log_path = os.path.join(log_base, 
                            "%s.tracker.log" % datetime.datetime.today().strftime("%Y%m%d"))
    
    print("logging to: %s" % log_path)
    
    # make sure folder exists
    log_folder = os.path.dirname(log_path)
    if not os.path.exists(log_folder):
        os.makedirs(log_folder)
        pass

    # set log_path to None to test/debug logging itself (will go to console)
    # TODO: set up the tee - add another handler
    # log_path = None

    logging.basicConfig(filename = log_path,
                        level    = logging.INFO,
                        format   = '%(asctime)s %(levelname)s %(message)s',
                        datefmt  = '%Y%m%d-%H:%M:%S')
    pass


if command == "find":
    #
    # "import" (re-check-out) projects dump from another "tracker urls"
    #
    result     = tracker.findProjects(*args)
    sys.exit()
    pass


if command == 'track':
    #
    # track a project that's been checked out
    #
    if not args:
        usage.usage()
        pass

    replace = options.replace

    for project_folder in args:
        link_path = tracker.track(project_folder, replace = replace)
        print("%s" % link_path)
        pass
    pass

elif command == 'untrack':

    #
    # TODO: option to delete the source, too
    #

    if not args:
        usage.usage()
        pass

    for project_folder in args:
        tracker.untrack(project_folder)
        pass
    pass

elif command in [ 'co', 'checkout' ]:

    if not args:
        usage.usage()
        pass

    source_spec    = args[0]
    rest           = args[1:]

    project_folder = tracker.checkout(source_spec, *rest)

    # XXX check that project_folder is not None
    if project_folder is None:
        xxx
        pass
    
    print("   TRACKING: %r" % project_folder)

    link_path      = tracker.track(project_folder)

    print("   tracker link path: %s" % link_path)

elif command == 'update' or command == "up":
    
    result = tracker.update(*args)

elif command == "urls":
    #
    # dump all the source urls in a format that can be used to 
    # set up tracking on another system
    #
    result = tracker.dumpSourceURLs(*args)

elif command == "import":

    # "import" (re-check-out) projects dump from another "tracker urls"
    result = tracker.importDumpedURLs(*args)

elif command == "mv" or command == "move":

    # move a project, in both source and tracked
    result     = tracker.moveFolders(*args)

elif command == "discover":

    # if --log
    if 0:
        # XXX the urllib3 logging doesn't work?
        import logging

        stream_handler = logging.StreamHandler()
        formatter      = logging.Formatter('%(asctime)s %(levelname)s %(message)s')

        stream_handler.setFormatter(formatter)
        
        logger = logging.getLogger('requests.packages.urllib3')
        logger.setLevel(logging.DEBUG)
        logger.addHandler(stream_handler)
        
        logger = logging.getLogger('github3')
        logger.addHandler(stream_handler)
        
        logger.setLevel(logging.DEBUG)
        pass
    

    # XXX get from config
    gituser       = "sjtsp2008"
    
    githubTracker = GitHubTracker(config, username = gituser)
    githubHelper  = githubTracker.githubHelper

    verbose       = False
    # verbose       = True
    
    print("rate points before: %s" % githubHelper.checkRatePointsLeft())
    result        = githubTracker.discover(*args, verbose = verbose)
    print("rate points after:  %s" % githubHelper.checkRatePointsLeft())

    
elif command == "nash-stats":

    # https://docs.google.com/spreadsheets/d/1Mg01ZUdHSYZfJre9ZyD5VMq4zv_xyZHmFjPTbklo-5Q/edit#gid=0
    #
    # Data Sheet
    #   Project
    #   Type
    #   People with 20+ Recent Commits
    #   Committers in Last 6 Months
    #   Total Contributors
    #   Number of contributors (code page)
    #   GitHub Birth
    #   GitHub Months Old
    #   Forks
    #   Stars
    #   Watchers
    #   Pull requests open
    #   Pull requests closed
    #   Total pull requests
    #   Source

    # Bubble Chart sheet
    #
    #   Project
    #   People with 20+ Recent Commits
    #   Committers in Last 6 Months
    #   Type
    #   Total Contributors

    # Forks sheet
    #
    #   Project	Forks	Stars	Watchers	GitHub Months Old	Forks Per Month

    # Stars sheet
    #
    #   Project	Forks	Stars	Watchers	GitHub Months Old	Stars Per Month

    # Love over Life sheet
    #
    #   Project	Forks	Stars	Watchers	GitHub Months Old	Stars Per Month

    
    # XXX
    gituser       = "sjtsp2008"
    
    githubTracker = GitHubTracker(config, username = gituser)
    helper        = githubTracker.githubHelper
    
    print("rate points before: %s" % githubTracker.checkRatePointsLeft())    

    for kind, name, obj in helper.getKindNameAndObject(args):

        print("  %s - %s - %s" % ( kind, name, obj ))

        # TODO: support other types
        repo = obj
        
        # print("breaking after one"); break

        
        
        features = github_stats.uniqueRecentContributors(repo)

        print("    unique recent contributors: %s" % features)
        
        pass
    
    print("rate points after:  %s" % githubTracker.checkRatePointsLeft())
    

elif command == "graph-viz":

    # TODO: generate d3
    # TODO: web server underneath, for exploration

    xxx
    
else:
    raise Exception("no-such-command", command)



