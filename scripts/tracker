#! /usr/bin/env python3
#
# tracker
#
#   utility for linking a version-controlled tree (svn, cvs, hg, git, ...)
#   into a tree of projects to be tracked
#
#   uses click to build up a mini-command-language
#
# note: this script is currently mid-transition from an old command-handler hack, toward
#       using click.  all of the commands that i regularly use have been moved to click
#       functions.  anything not-yet-click-ized may just wither away
#
#
# TODO:
#    - use real config, for declaring where tracking folder is, ...
#    - full triggered support
#      - when something updated, update some other project and run tests, ...
#

_usage_str = """usage: tracker <command> <folder> [...]

  track

    --replace

  checkout (aka co)

  update [project] [...]
  up

  untrack <src-folder> [...]     (*not* the src/tracking/... folder)

"""

import datetime
import logging
import os
import sys

import click

# XXX wtf? PYTHONPATH is not being respected?  the github3 egg is earlier ???
# sys.path.insert(0, '/Users/jeff/src/tracking/dev/github3.py/git/github3.py')

from oompa.tracking.SourceTracker        import SourceTracker

from oompa.tracking.github.GitHubTracker import GitHubTracker
from oompa.tracking.github               import github_stats
from oompa.tracking.github               import github_utils



def setup_logging(stdout = False):
    """
    not all commands should log.  
    """

    # set log_path to None to test/debug logging itself (will go to console)
    # TODO: set up the tee - add another handler

    log_path = None
    
    if not stdout:
        log_base = os.path.join(os.environ.get("HOME"), "tracker-logs")
        log_path = os.path.join(log_base, 
                                "%s.tracker.log" % datetime.datetime.today().strftime("%Y%m%d"))
    
        print("logging to: %s" % log_path)
    
        # make sure folder exists
        log_folder = os.path.dirname(log_path)
        if not os.path.exists(log_folder):
            os.makedirs(log_folder)
            pass
        pass
    
    logging.basicConfig(filename = log_path,
                        level    = logging.INFO,
                        format   = '%(asctime)s %(levelname)s %(message)s',
                        datefmt  = '%Y%m%d-%H:%M:%S')
    
    return
    

#
# creates a command group, which you can call, and it
# will "route to" the correct subcommand
#
@click.group()
def cli():
    return


#
# TODO: figure out how to specify "at least one" in @click.argument
#
@cli.command(help = "search for specified strings in tracked project folder names")
@click.argument('patterns', nargs = -1)

def find(patterns):

    result = tracker.findProjects(*patterns)

    return result



@cli.command(help = "update some or all tracked projects")
@click.option("--stdout",  is_flag = True)
@click.option("--verbose", is_flag = True)
@click.argument('projects', nargs = -1)

def update(projects, stdout = False, verbose = False):

    setup_logging(stdout = stdout)

    result = tracker.update(*projects, verbose = verbose)
    
    return result

# "co" is alias for checkout
cli.add_command(update, "up")




@cli.command(help = "move a project folder i src tree, and maintain all tracking links")
@click.argument('project_folder', nargs = 1)
@click.argument('dest_folder', nargs = 1)

def move(project_folder, dest_folder):

    setup_logging()
    
    result = tracker.moveFolders(project_folder, dest_folder)
    
    return result

cli.add_command(update, "mv")



@cli.command(help = "start tracking a repo (by url) - initial checkout")
@click.argument('project_urls', nargs = -1)

def checkout(project_urls):
    
    if not project_urls:
        usage.usage()
        pass

    setup_logging()
        
    source_spec    = project_urls[0]
    rest           = project_urls[1:]

    project_folder = tracker.checkout(source_spec, *rest)

    # XXX check that project_folder is not None
    if project_folder is None:
        xxx
        pass
    
    print("   TRACKING: %r" % project_folder)

    link_path      = tracker.track(project_folder)

    print("   tracker link path: %s" % link_path)

    return

# "co" is alias for checkout
cli.add_command(checkout, "co")


# ####
#
# the discovery subsystem
#


@cli.command(help = "discover updates around github neighborhood of interest")
@click.argument('args', nargs = -1)

def discover(args):

    # TODO: get from options
    verbose       = False
    # verbose       = True
    
    # try to trace all http traffic to github - i have not gotten this to work yet
    if 0:
        # XXX the urllib3 logging doesn't work?
        import logging

        stream_handler = logging.StreamHandler()
        formatter      = logging.Formatter('%(asctime)s %(levelname)s %(message)s')

        stream_handler.setFormatter(formatter)
        
        logger = logging.getLogger('requests.packages.urllib3')
        logger.setLevel(logging.DEBUG)
        logger.addHandler(stream_handler)
        
        logger = logging.getLogger('github3')
        logger.addHandler(stream_handler)
        
        logger.setLevel(logging.DEBUG)
        pass
    
    githubTracker = GitHubTracker(config)
    githubHelper  = githubTracker.githubHelper

    print("rate points before: %s" % githubHelper.checkRatePointsLeft())
    result        = githubTracker.discover(*args, verbose = verbose)
    print("rate points after:  %s" % githubHelper.checkRatePointsLeft())

    return


@cli.command(help = "remove an entity from set of tracked entities")
@click.argument('entities', nargs = -1)

def undiscover(entities):

    githubTracker = GitHubTracker(config)

    return githubTracker.removeEntities(*entities)
    


@cli.command(help = "list the contents of current metadata store")
@click.argument('args', nargs = -1)

def tracking(args):
    """
    TODO: able to sort by alph (default) or date-added
    """
    
    githubTracker = GitHubTracker(config)

    # TODO: if args specified, only list the entities that match one
    #       of the strings/patterns (tracker tracking linked)
    
    for entityMetaName in githubTracker.listTracking():
        print("%s" % entityMetaName)
        pass

    return

#
# the discovery subsystem
#
# ####




#
# __main__
#

# XXX load a real config, from yaml
config  = {}

tracker = SourceTracker(config)

cli()

print("exit early"); sys.exit()


# XXX non-click
args    = sys.argv[1:]
command = args[0]
args    = args[1:]

# TODO: only certain commands what a log

dont_need_log = [
    "nash-stats",
    "graph-viz",
    ]


# XXX incorporate all of this in to click
if command not in dont_need_log:
    setup_logging()
    pass

if command == 'track':
    #
    # start tracking a project that's been checked out some other way
    # (i.e. link it in to the tracking system)
    #
    if not args:
        usage.usage()
        pass

    replace = options.replace

    for project_folder in args:
        link_path = tracker.track(project_folder, replace = replace)
        print("%s" % link_path)
        pass
    pass

elif command == 'untrack':

    #
    # TODO: option to delete the source, too
    #

    if not args:
        usage.usage()
        pass

    for project_folder in args:
        tracker.untrack(project_folder)
        pass
    pass

elif command == "urls":
    #
    # dump all the source urls in a format that can be used to 
    # set up tracking on another system
    #
    result = tracker.dumpSourceURLs(*args)

elif command == "import":

    # "import" (re-check-out) projects dump from another "tracker urls"
    result = tracker.importDumpedURLs(*args)

elif command == "nash-stats":

    # https://docs.google.com/spreadsheets/d/1Mg01ZUdHSYZfJre9ZyD5VMq4zv_xyZHmFjPTbklo-5Q/edit#gid=0
    #
    # Data Sheet
    #   Project
    #   Type
    #   People with 20+ Recent Commits
    #   Committers in Last 6 Months
    #   Total Contributors
    #   Number of contributors (code page)
    #   GitHub Birth
    #   GitHub Months Old
    #   Forks
    #   Stars
    #   Watchers
    #   Pull requests open
    #   Pull requests closed
    #   Total pull requests
    #   Source

    # Bubble Chart sheet
    #
    #   Project
    #   People with 20+ Recent Commits
    #   Committers in Last 6 Months
    #   Type
    #   Total Contributors

    # Forks sheet
    #
    #   Project	Forks	Stars	Watchers	GitHub Months Old	Forks Per Month

    # Stars sheet
    #
    #   Project	Forks	Stars	Watchers	GitHub Months Old	Stars Per Month

    # Love over Life sheet
    #
    #   Project	Forks	Stars	Watchers	GitHub Months Old	Stars Per Month

    githubTracker = GitHubTracker(config)
    helper        = githubTracker.githubHelper
    
    print("rate points before: %s" % githubTracker.checkRatePointsLeft())    

    for kind, name, obj in helper.getKindNameAndObject(args):

        print("  %s - %s - %s" % ( kind, name, obj ))

        # TODO: support other types
        repo = obj
        
        # print("breaking after one"); break

        
        
        features = github_stats.uniqueRecentContributors(repo)

        print("    unique recent contributors: %s" % features)
        
        pass
    
    print("rate points after:  %s" % githubTracker.checkRatePointsLeft())
    
else:
    raise Exception("no-such-command", command)


