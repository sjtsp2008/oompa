#! /usr/bin/env python3
#
# tracker
#
#   utility for linking a version-controlled tree (svn, cvs, hg, git, ...)
#   into a tree of projects to be tracked
#
#   uses click to build up a mini-command-language
#
# note: this script is currently mid-transition from an old command-handler hack, toward
#       using click.  all of the commands that i regularly use have been moved to click
#       functions.  anything not-yet-click-ized may just wither away
#
#
# TODO:
#    - use real config, for declaring where tracking folder is, ...
#    - full triggered support
#      - when something updated, update some other project and run tests, ...
#

_usage_str = """usage: tracker <command> <folder> [...]

  track

    --replace

  checkout (aka co)

  update [project] [...]
  up

  untrack [--keep-src] <src-folder> [...]     remove project from tracking.  default is to delete source

  mv <src> <dest-folder>

  discover                  monitor entity actvity or start monitoring new entities

  undiscover

  tracking

  find <pattern>            find a project or pattern in source.  only checks top N levels

"""

import datetime
import logging
import os
import sys

import click

# XXX wtf? PYTHONPATH is not being respected?  the github3 egg is earlier ???
# sys.path.insert(0, '/Users/jeff/src/tracking/dev/github3.py/git/github3.py')

from oompa.tracking.SourceTracker        import SourceTracker

from oompa.tracking.github.GitHubTracker import GitHubTracker
from oompa.tracking.github               import github_stats
from oompa.tracking.github               import github_utils



def setup_logging(stdout = False, level = None):
    """
    not all commands should log.  
    """

    if level is None:
        level = logging.INFO
    
    # set log_path to None to test/debug logging itself (will go to console)
    # TODO: set up the tee - add another handler

    log_path = None
    
    if not stdout:

        # XXX get from some config
        oompa_base = os.path.join(os.environ.get("HOME"), "oompa")
        
        log_base = os.path.join(oompa_base, "tracker-logs")
        log_path = os.path.join(log_base, 
                                "%s.tracker.log" % datetime.datetime.today().strftime("%Y%m%d"))
    
        print("logging to: %s" % log_path)
    
        # make sure folder exists
        log_folder = os.path.dirname(log_path)
        if not os.path.exists(log_folder):
            os.makedirs(log_folder)
            pass
        pass
    
    logging.basicConfig(filename = log_path,
                        level    = level,
                        format   = '%(asctime)s %(levelname)s %(message)s',
                        datefmt  = '%Y%m%d-%H:%M:%S')
    return
    

#
# creates a command group, which you can call, and it
# will "route to" the correct subcommand
#
@click.group()
def cli():
    return



# TODO: in help, report the actual default in SourceTracker

@cli.command(help = "update some or all tracked projects")
@click.option("--stdout",  is_flag = True)
@click.option("--verbose", is_flag = True)
@click.option("--sample", nargs = 1, help = "random sampling percentage, as int.  default to 20 (percent)")
@click.argument('projects', nargs = -1)

def update(projects, stdout = False, verbose = False, sample = None):

    setup_logging(stdout = stdout)

    tracker.setSampleProb(sample)
    
    result = tracker.update(*projects,
                            verbose = verbose)
    
    return result

# add "up" as alias for update
cli.add_command(update, "up")




@cli.command(help = "move a project folder in src tree, and maintain all tracking links")
@click.argument('project_folder', nargs = 1)
@click.argument('dest_folder',    nargs = 1)

def move(project_folder, dest_folder):

    setup_logging()

    result = tracker.moveFolders(project_folder, dest_folder)
    
    return result

# add alias
cli.add_command(move, "mv")



@cli.command(help = "start tracking a repo (by url) - initial checkout")
@click.argument('project_urls', nargs = -1)

def checkout(project_urls):
    
    if not project_urls:
        usage.usage()
        pass

    setup_logging()
        
    source_spec    = project_urls[0]
    rest           = project_urls[1:]
    project_folder = tracker.checkout(source_spec, *rest)

    # XXX check that project_folder is not None
    if project_folder is None:
        xxx
        pass
    
    print("   TRACKING: %r" % project_folder)

    link_path = tracker.track(project_folder)

    print("   tracker link path: %s" % link_path)

    return

# "co" is alias for checkout
cli.add_command(checkout, "co")





@cli.command(help = "start tracking an already-checked-out project - add it to tracking system")
@click.argument('folders', nargs = -1)

def track(folders):
    
    if not folders:
        usage.usage()
        pass

    setup_logging()

    # replace = options.replace
    replace = False

    for project_folder in folders:

        # print("TRACK: %r" % folders)

        link_path = tracker.track(project_folder, replace = replace)
        print("%s" % link_path)
        pass

    return
    

@cli.command(help = "stop tracking a project.  folder can be in the tracking tree, or in the source tree")
@click.option("--keep-src",  is_flag = True)
@click.argument('folders', nargs = -1)

def untrack(folders, keep_src = False):
    """
    """

    # XXX i think i can do this in click specs, somehow
    if not folders:
        print("you must specify at least one project to untrack")
        return

    for project_folder in folders:
        tracker.untrack(project_folder, keep_src = keep_src)
        pass

    return


@cli.command(help = "reset git after a stupid self-stomping.  just a git reset --hard")
@click.option("--verbose", is_flag = True)
@click.argument('folders', nargs = -1)

def reset(folders, verbose = False):
    """
    """

    # XXX i think i can do this in click specs, somehow
    if not folders:
        print("you must specify at least one project to untrack")
        return

    for folder in folders:
        result = tracker.reset_git(folder, verbose = verbose)
        pass

    return

cli.add_command(reset, "reset-git")




@cli.command(help = "dump all the source urls in a format that can be used to set up tracking on another system")
@click.argument('patterns', nargs = -1)

def urls(patterns):

    return tracker.dumpSourceURLs(*patterns)



#
# TODO: figure out how to specify "at least one" in @click.argument
#  - support breaking out after first match
#  - support override depth
#
@cli.command(help = "search for specified strings in tracked project folder names")
@click.option('--depth', nargs = 1)
@click.argument('patterns', nargs = -1)

def find(patterns, depth = None):

    if depth is not None:
        depth = int(depth)

    for project in tracker.findProjects(*patterns, depth = depth):

        # report the actual src folder, not the tracking folder
        # XXX i'm not sure who should do this
        print("%s" % project.get_src_path())
        pass

    return 




# ####
#
# tag/annotation system

@cli.command(help = "update tags and/or annotation for a project")
@click.argument('patterns', nargs = -1)

def tag(patterns):

    xxx
    return tracker.dumpSourceURLs(*patterns)


@cli.command(help = "dump current tags and annotation for projects")
@click.argument('patterns', nargs = -1)

def get_tags(patterns):

    for project, tagInfo in tracker.getTagInfos(patterns):

        if tagInfo is None:
            tags, description = [], ""
        else:
            tags, description = tagInfo
            pass
        
        print("%s" % project.path)
        print("  source: %s" % project.getSourceURL())
        print("  tags:   %s" % ",".join(tags))
        print("  desc:   %s" % description)
        print("")
        pass

    return

# "co" is alias for checkout
cli.add_command(get_tags, "get-tags")


def search_tags():

    zzz
    return



@cli.command(help = "attempt to get project tags from repo source (esp github), and add to tags db")
@click.argument('project_urls', nargs = -1)

def get_description(project_urls):
    """
    this is really just get-description, so far
    """
    
    if not project_urls:
        usage.usage()
        pass

    from oompa.tracking.TagManager   import TagManager

    # TODO: probably just add a sugar method on the tracker
    github_tracker = GitHubTracker(config)
    github_helper  = github_tracker.githubHelper
    
    tag_mgr        = TagManager(config)
    
    for source_spec in project_urls:

        readme = github_helper.getBlurb(url = source_spec)
        
        print("  readme: %s - %r" % ( source_spec, readme ))

        pass

    return





#
#
# ###


# ####
#
# the entity discovery/tracking subsystem
#
#    used to watch for new repos by user/org, and starred repos by people who
#    are interesting, and trends in followed/following
#

@cli.command(help = "discover updates around github neighborhood of interest")
@click.option("--verbose",            is_flag = True)
@click.option("--log-http",           is_flag = True)
@click.option("--no-etag",            is_flag = True)
@click.option("--format", nargs =  1, default = "html")
@click.argument('args',   nargs = -1)


def discover(args, verbose = False, format = None, log_http = False, no_etag = False):

    if log_http:
        # set to debug to see github3 and http logging
        setup_logging(stdout = True, level = logging.INFO)
        # setup_logging(stdout = True, level = logging.DEBUG)
    
    githubTracker = GitHubTracker(config)

    if no_etag:
        tracker.use_etag = False
        pass

    # 
    # print("discover - starting pure _discoverUpdates")
    # tracker.printRatePointsLeft("rate points before pure discover")
    # result        = tracker._discoverUpdates(*args)
    # print("  done pure _discoverUpdates")
        
    
    githubTracker.printRatePointsLeft("rate points before")
    result = githubTracker.discover(*args,
                                    format  = format,
                                    verbose = verbose)
    githubTracker.printRatePointsLeft("rate points after")

    githubTracker.close()
    
    return



@cli.command(help = "remove an entity from set of tracked entities")
@click.argument('entities', nargs = -1)

def undiscover(entities):
    
    tracker = GitHubTracker(config)

    result = tracker.removeEntities(*entities)

    tracker.close()
    
    return result
    


@cli.command(help = "list the entities currently being discovered/tracked")
@click.argument('args', nargs = -1)

def discovering(args):
    """

    TODO: able to filter by pattern
    TODO: able to sort by alph (default) or date-added
    """
    
    tracker = GitHubTracker(config)

    for entityMetaName in tracker.listTracking(args):
        print("%s" % entityMetaName)
        pass

    return

#
# the discovery subsystem
#
# ####



@cli.command(help = "report discovered updates")
@click.option("--format", nargs =  1, default = "html")
@click.argument('args',   nargs = -1)
# TODO: add date-range options

def report(args, format = None):

    tracker = GitHubTracker(config)

    # TODO: get report generator from factory
    if format != "html":
        xxx

    # XXX still baking - pass in real dates
    start_date = "20160417"
    end_date   = start_date
        
    tracker.reportUpdateHTML(*args,
                             start_date = start_date,
                             end_date   = end_date)
    tracker.close()
    return




@cli.command(help = "temp command to migrate to new storage scheme")

def updateEntityStore():

    tracker = GitHubTracker(config)

    tracker._metadataStore.updateStorageScheme()
    
    return
    
# add alias
cli.add_command(updateEntityStore, "update-entity-store")




#
# __main__
#

# XXX load a real config, from yaml
config  = {}

tracker = SourceTracker(config)

cli()

# DEAD CODE BELOW

"""

# XXX non-click
args    = sys.argv[1:]
command = args[0]
args    = args[1:]

# TODO: only certain commands want a log

dont_need_log = [
    "nash-stats",
    "graph-viz",
    ]


# XXX incorporate all of this in to click
if command not in dont_need_log:
    setup_logging()
    pass

if command == "import":

    # "import" (re-check-out) projects dump from another "tracker urls"
    result = tracker.importDumpedURLs(*args)

elif command == "nash-stats":

    # https://docs.google.com/spreadsheets/d/1Mg01ZUdHSYZfJre9ZyD5VMq4zv_xyZHmFjPTbklo-5Q/edit#gid=0
    #
    # Data Sheet
    #   Project
    #   Type
    #   People with 20+ Recent Commits
    #   Committers in Last 6 Months
    #   Total Contributors
    #   Number of contributors (code page)
    #   GitHub Birth
    #   GitHub Months Old
    #   Forks
    #   Stars
    #   Watchers
    #   Pull requests open
    #   Pull requests closed
    #   Total pull requests
    #   Source

    # Bubble Chart sheet
    #
    #   Project
    #   People with 20+ Recent Commits
    #   Committers in Last 6 Months
    #   Type
    #   Total Contributors

    # Forks sheet
    #
    #   Project	Forks	Stars	Watchers	GitHub Months Old	Forks Per Month

    # Stars sheet
    #
    #   Project	Forks	Stars	Watchers	GitHub Months Old	Stars Per Month

    # Love over Life sheet
    #
    #   Project	Forks	Stars	Watchers	GitHub Months Old	Stars Per Month

    tracker = GitHubTracker(config)
    helper        = tracker.githubHelper
    
    print("rate points before: %s" % tracker.checkRatePointsLeft())    

    for kind, name, obj in helper.getKindNameAndObject(args):

        print("  %s - %s - %s" % ( kind, name, obj ))

        # TODO: support other types
        repo = obj
        
        # print("breaking after one"); break

        
        
        features = github_stats.uniqueRecentContributors(repo)

        print("    unique recent contributors: %s" % features)
        
        pass
    
    print("rate points after:  %s" % tracker.checkRatePointsLeft())
    
else:
    raise Exception("no-such-command", command)


"""
